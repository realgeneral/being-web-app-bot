import asyncio
from datetime import datetime
import sys
import os

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

from .statistic import export_tables_to_excel, get_user_statistics, get_task_statistics, get_wallet_statistics


sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


API_TOKEN = '7379330461:AAFANy49VXwlHwhmZgt99_emw3YW1VZncIw'
ADMIN_IDS = [7154683616, 1801021065]; 

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

def admin_only(handler):
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id in ADMIN_IDS:
            return await handler(message, *args, **kwargs)
        else:
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    return wrapper

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü
@dp.message_handler(commands=['export_tables'])
@admin_only
async def cmd_export_tables(message: types.Message):
    try:
        await export_tables_to_excel()
        files_to_send = ['users.xlsx', 'tasks.xlsx', 'task_statuses.xlsx']
        
        media = types.MediaGroup()
        for file_path in files_to_send:
            media.attach_document(types.InputFile(file_path))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await bot.send_media_group(chat_id=message.chat.id, media=media)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        caption = (
            f"üìä *–≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü*\n"
            f"`{current_datetime}`\n\n"
            f"–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ XLSX —Ñ–∞–π–ª—ã."
        )
        await message.reply(caption, parse_mode='Markdown')
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        for file in files_to_send:
            os.remove(file)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü: {str(e)}")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(commands=['stat'])
@admin_only

async def cmd_user_stats(message: types.Message):
    try:

        stats_user = await get_user_statistics()
        stats_task = await get_task_statistics()
        stats_wallet = await get_wallet_statistics()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        response = f"*============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =================*\n"
        response += f"`{current_datetime}`\n\n"

        response += (
            f"üî∏ _–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏_\n"
            f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_user['total_users']}\n"
            f"  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {stats_user['recent_users']}\n"
            f"  –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_user['premium_users']}\n"
            f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —è–∑—ã–∫–æ–º 'RU': {stats_user['ru_users']}\n"
            f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —è–∑—ã–∫–æ–º 'EN': {stats_user['en_users']}\n"
            f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {stats_user['referral_users']}\n\n"
        )
        
        response += f"üî∏ _–ó–∞–¥–∞—á–∏_ \n"
        response += f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {stats_task['total_tasks']}\n"

        for status, count in stats_task['task_statuses'].items():
            response += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {count}\n"

        response += (
            f"  –ó–∞–¥–∞—á —Ç–∏–ø–∞ 'Bot': {stats_task['tasks_type1']}\n"
            f"  –ó–∞–¥–∞—á —Ç–∏–ø–∞ 'Subscribe to Channel': {stats_task['tasks_type2']}\n\n"
        )
        
        
        response += f"üî∏ _–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è_ \n"
        response += f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats_wallet['total_transactions']}\n"
        response += f"  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {stats_wallet['recent_transactions']}\n"
        response += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {stats_wallet['deposit_transactions']}\n"
        response += f"  –î–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {stats_wallet['recent_deposit_transactions']}\n"
        response += f"  –û–±—â–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: {stats_wallet['total_amount_deposited']}\n"
        response += f"  –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {stats_wallet['recent_total_amount_deposited']}\n"


        response += "  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
        for status, count in stats_wallet['transaction_statuses'].items():
            response += f"    '{status}': {count}\n"

        response += "  –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏:\n"
        for status, count in stats_wallet['recent_transaction_statuses'].items():
            response += f"    '{status}': {count}\n"

        response += f"\n*=======================================*\n"
            
        await message.reply(response, parse_mode='Markdown')
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", parse_mode='Markdown')




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
