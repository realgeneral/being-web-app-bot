import asyncio
import sys
import os

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

from .statistic import export_tables_to_excel, get_user_statistics, get_task_statistics

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


API_TOKEN = '7379330461:AAFANy49VXwlHwhmZgt99_emw3YW1VZncIw'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–∞–±–ª–∏—Ü
@dp.message_handler(commands=['export_tables'])
async def cmd_export_tables(message: types.Message):
    try:
        await export_tables_to_excel()
        await message.reply("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ XLSX —Ñ–∞–π–ª—ã.")
        await bot.send_document(message.chat.id, open('users.xlsx', 'rb'))
        await bot.send_document(message.chat.id, open('tasks.xlsx', 'rb'))
        await bot.send_document(message.chat.id, open('task_statuses.xlsx', 'rb'))
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü: {str(e)}")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(commands=['stat'])
async def cmd_user_stats(message: types.Message):
    try:

        stats_user = await get_user_statistics()
        stats_task = await get_task_statistics()

        response = f"*============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =================*\n"

        response += (
            f"üî∏ _–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏_"
            f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_user['total_users']}\n"
            f"  –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: {stats_user['recent_users']}\n\n"
        )
        
        response += f"üî∏ _–ó–∞–¥–∞—á–∏_ \n"
        response += f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {stats_task['total_tasks']}\n"

        for status, count in stats_task['task_statuses'].items():
            response += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}': {count}\n"
        
        
        response += f"\nüî∏ _–í—ã–ø–ª–∞—Ç—ã_ \n"

        response += f"*=======================================*\n"
            
        await message.reply(response)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", parse_mode='Markdown')




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
